// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using BarCejas.Data.DataContext;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace BarCejas.Data.DataContext
{
    public partial class BardecejasContext
    {
        private BardecejasContextProcedures _procedures;

        public virtual BardecejasContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new BardecejasContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public BardecejasContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<spConsultarAgendaTurnosResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spConsultarHistoricoOrdenesClienteResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spConsultarOrdenesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spDeletePreguntasFrecuentesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spDeleteTestimonioResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spGetHorariosProfesionalesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spGetReportePaqueteResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spGetReporteProfesionalResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spGetReporteServicioResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spUpdateEstatusNovedadesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spUpdateEstatusPreguntasFrecuentesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spUpdateEstatusTestimoniosResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spUpdateIndHomeNovedadesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spUpdateOrdenPreguntasResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spUpdateOrdenTestimonioResult>().HasNoKey().ToView(null);
        }
    }

    public interface IBardecejasContextProceduresContract
    {
        Task<List<spConsultarAgendaTurnosResult>> spConsultarAgendaTurnosAsync(int? idProfesional, int? idContactoLocal, CancellationToken cancellationToken = default);
        Task<List<spConsultarHistoricoOrdenesClienteResult>> spConsultarHistoricoOrdenesClienteAsync(int? IdCliente, CancellationToken cancellationToken = default);
        Task<List<spConsultarOrdenesResult>> spConsultarOrdenesAsync(int? IdOrdenIten, int? IdServicio, int? IdProfesional, int? IdModalidadPago, int? IdEstatusOrden, int? IdEstatusPago, DateTime? FechaInicio, DateTime? FechaFin, CancellationToken cancellationToken = default);
        Task<int> spDeletePreguntasFrecuentesAsync(long? Id, int? NrOrden, CancellationToken cancellationToken = default);
        Task<int> spDeleteTestimonioAsync(long? Id, int? NrOrden, CancellationToken cancellationToken = default);
        Task<List<spGetHorariosProfesionalesResult>> spGetHorariosProfesionalesAsync(int? Dia, int? IdServicio, int? IdContacto, DateTime? ServiceDate, CancellationToken cancellationToken = default);
        Task<List<spGetReportePaqueteResult>> spGetReportePaqueteAsync(string NombrePaquete, string NombreProfesional, string NombreCliente, DateTime? FechaIncio, DateTime? FechaFin, string NombreLocal, int? MedioDePago, int? EstadoTurno, int? EstadoPago, CancellationToken cancellationToken = default);
        Task<List<spGetReporteProfesionalResult>> spGetReporteProfesionalAsync(string NombreServicio, string NombreProfesional, decimal? Precio, DateTime? FechaIncio, DateTime? FechaFin, CancellationToken cancellationToken = default);
        Task<List<spGetReporteServicioResult>> spGetReporteServicioAsync(string NombreServicio, string NombreProfesional, string NombreCliente, DateTime? FechaIncio, DateTime? FechaFin, string NombreLocal, int? MedioDePago, int? EstadoTurno, int? EstadoPago, CancellationToken cancellationToken = default);
        Task<int> spUpdateEstatusNovedadesAsync(int? Id, bool? IndEstatus, CancellationToken cancellationToken = default);
        Task<int> spUpdateEstatusPreguntasFrecuentesAsync(int? Id, bool? IndEstatus, CancellationToken cancellationToken = default);
        Task<int> spUpdateEstatusTestimoniosAsync(int? Id, bool? IndEstatus, CancellationToken cancellationToken = default);
        Task<int> spUpdateIndHomeNovedadesAsync(int? Id, bool? IndHome, CancellationToken cancellationToken = default);
        Task<int> spUpdateOrdenPreguntasAsync(string Data, CancellationToken cancellationToken = default);
        Task<int> spUpdateOrdenTestimonioAsync(string Data, CancellationToken cancellationToken = default);
    }

    public partial class BardecejasContextProcedures
    {
        private readonly BardecejasContext _context;

        public BardecejasContextProcedures(BardecejasContext context)
        {
            _context = context;
        }

        public virtual async Task<List<spConsultarAgendaTurnosResult>> spConsultarAgendaTurnosAsync(int? idProfesional, int? idContactoLocal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idProfesional",
                    Value = idProfesional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idContactoLocal",
                    Value = idContactoLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spConsultarAgendaTurnosResult>("EXEC @returnValue = [dbo].[spConsultarAgendaTurnos] @idProfesional, @idContactoLocal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spConsultarHistoricoOrdenesClienteResult>> spConsultarHistoricoOrdenesClienteAsync(int? IdCliente, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdCliente",
                    Value = IdCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spConsultarHistoricoOrdenesClienteResult>("EXEC @returnValue = [dbo].[spConsultarHistoricoOrdenesCliente] @IdCliente", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spConsultarOrdenesResult>> spConsultarOrdenesAsync(int? IdOrdenIten, int? IdServicio, int? IdProfesional, int? IdModalidadPago, int? IdEstatusOrden, int? IdEstatusPago, DateTime? FechaInicio, DateTime? FechaFin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdOrdenIten",
                    Value = IdOrdenIten ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdServicio",
                    Value = IdServicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProfesional",
                    Value = IdProfesional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdModalidadPago",
                    Value = IdModalidadPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstatusOrden",
                    Value = IdEstatusOrden ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstatusPago",
                    Value = IdEstatusPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaInicio",
                    Value = FechaInicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFin",
                    Value = FechaFin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spConsultarOrdenesResult>("EXEC @returnValue = [dbo].[spConsultarOrdenes] @IdOrdenIten, @IdServicio, @IdProfesional, @IdModalidadPago, @IdEstatusOrden, @IdEstatusPago, @FechaInicio, @FechaFin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDeletePreguntasFrecuentesAsync(long? Id, int? NrOrden, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "NrOrden",
                    Value = NrOrden ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[spDeletePreguntasFrecuentes] @Id, @NrOrden", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDeleteTestimonioAsync(long? Id, int? NrOrden, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "NrOrden",
                    Value = NrOrden ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[spDeleteTestimonio] @Id, @NrOrden", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spGetHorariosProfesionalesResult>> spGetHorariosProfesionalesAsync(int? Dia, int? IdServicio, int? IdContacto, DateTime? ServiceDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Dia",
                    Value = Dia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdServicio",
                    Value = IdServicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdContacto",
                    Value = IdContacto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceDate",
                    Value = ServiceDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetHorariosProfesionalesResult>("EXEC @returnValue = [dbo].[spGetHorariosProfesionales] @Dia, @IdServicio, @IdContacto, @ServiceDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spGetReportePaqueteResult>> spGetReportePaqueteAsync(string NombrePaquete, string NombreProfesional, string NombreCliente, DateTime? FechaIncio, DateTime? FechaFin, string NombreLocal, int? MedioDePago, int? EstadoTurno, int? EstadoPago, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NombrePaquete",
                    Size = 100,
                    Value = NombrePaquete ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NombreProfesional",
                    Size = 100,
                    Value = NombreProfesional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NombreCliente",
                    Size = 100,
                    Value = NombreCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIncio",
                    Value = FechaIncio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFin",
                    Value = FechaFin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NombreLocal",
                    Size = 100,
                    Value = NombreLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MedioDePago",
                    Value = MedioDePago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EstadoTurno",
                    Value = EstadoTurno ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EstadoPago",
                    Value = EstadoPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetReportePaqueteResult>("EXEC @returnValue = [dbo].[spGetReportePaquete] @NombrePaquete, @NombreProfesional, @NombreCliente, @FechaIncio, @FechaFin, @NombreLocal, @MedioDePago, @EstadoTurno, @EstadoPago", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spGetReporteProfesionalResult>> spGetReporteProfesionalAsync(string NombreServicio, string NombreProfesional, decimal? Precio, DateTime? FechaIncio, DateTime? FechaFin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NombreServicio",
                    Size = 100,
                    Value = NombreServicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NombreProfesional",
                    Size = 100,
                    Value = NombreProfesional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 2,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIncio",
                    Value = FechaIncio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFin",
                    Value = FechaFin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetReporteProfesionalResult>("EXEC @returnValue = [dbo].[spGetReporteProfesional] @NombreServicio, @NombreProfesional, @Precio, @FechaIncio, @FechaFin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spGetReporteServicioResult>> spGetReporteServicioAsync(string NombreServicio, string NombreProfesional, string NombreCliente, DateTime? FechaIncio, DateTime? FechaFin, string NombreLocal, int? MedioDePago, int? EstadoTurno, int? EstadoPago, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NombreServicio",
                    Size = 100,
                    Value = NombreServicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NombreProfesional",
                    Size = 100,
                    Value = NombreProfesional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NombreCliente",
                    Size = 100,
                    Value = NombreCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIncio",
                    Value = FechaIncio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFin",
                    Value = FechaFin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NombreLocal",
                    Size = 100,
                    Value = NombreLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MedioDePago",
                    Value = MedioDePago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EstadoTurno",
                    Value = EstadoTurno ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EstadoPago",
                    Value = EstadoPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetReporteServicioResult>("EXEC @returnValue = [dbo].[spGetReporteServicio] @NombreServicio, @NombreProfesional, @NombreCliente, @FechaIncio, @FechaFin, @NombreLocal, @MedioDePago, @EstadoTurno, @EstadoPago", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spUpdateEstatusNovedadesAsync(int? Id, bool? IndEstatus, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IndEstatus",
                    Value = IndEstatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[spUpdateEstatusNovedades] @Id, @IndEstatus", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spUpdateEstatusPreguntasFrecuentesAsync(int? Id, bool? IndEstatus, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IndEstatus",
                    Value = IndEstatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[spUpdateEstatusPreguntasFrecuentes] @Id, @IndEstatus", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spUpdateEstatusTestimoniosAsync(int? Id, bool? IndEstatus, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IndEstatus",
                    Value = IndEstatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[spUpdateEstatusTestimonios] @Id, @IndEstatus", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spUpdateIndHomeNovedadesAsync(int? Id, bool? IndHome, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IndHome",
                    Value = IndHome ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[spUpdateIndHomeNovedades] @Id, @IndHome", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spUpdateOrdenPreguntasAsync(string Data, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Data",
                    Size = -1,
                    Value = Data ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[spUpdateOrdenPreguntas] @Data", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spUpdateOrdenTestimonioAsync(string Data, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Data",
                    Size = -1,
                    Value = Data ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[spUpdateOrdenTestimonio] @Data", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
